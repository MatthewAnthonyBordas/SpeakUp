{
  "name": "watson-developer-cloud",
  "version": "0.9.9",
  "description": "Nodejs Client Wrapper to use the IBM Watson Services",
  "main": "./lib/index",
  "repository": {
    "type": "git",
    "url": "https://github.com/watson-developer-cloud/nodejs-wrapper.git"
  },
  "keywords": [
    "ibm",
    "watson",
    "wdc",
    "watson developer cloud",
    "message resonance",
    "user modeling",
    "machine translation",
    "concept expansion",
    "question and answer",
    "relationship extraction",
    "language identification",
    "visual recognition ",
    "speech to text ",
    "text to speech ",
    "concept insights ",
    "tradeoff analytics "
  ],
  "author": {
    "name": "IBM Corp."
  },
  "contributors": [
    {
      "name": "German Attanasio Ruiz",
      "email": "germanatt@us.ibm.com"
    },
    {
      "name": "Jeff Stylos",
      "email": "jsstylos@us.ibm.com"
    }
  ],
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/watson-developer-cloud/nodejs-wrapper/issues"
  },
  "devDependencies": {
    "mocha": "~2.2.1",
    "coveralls": "~2.11.2",
    "istanbul": "~0.3.5",
    "nock": "~1.3.0",
    "qs": "~2.4.1"
  },
  "dependencies": {
    "async": "~0.9.0",
    "cookie": "~0.1.2",
    "extend": "~2.0.0",
    "isstream": "~0.1.1",
    "object.omit": "~0.2.1",
    "object.pick": "~1.1.1",
    "request": "~2.54.0",
    "string-template": "~0.2.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 4000",
    "prepare": "npm test && npm version patch",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --reporter spec --timeout 4000",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "readme": "Watson Developer Cloud Node.js Client\n============================================\n\n[![Build Status](https://secure.travis-ci.org/watson-developer-cloud/nodejs-wrapper.png)](http://travis-ci.org/watson-developer-cloud/nodejs-wrapper)\n[![Dependency Status](https://gemnasium.com/watson-developer-cloud/nodejs-wrapper.png)](https://gemnasium.com/watson-developer-cloud/nodejs-wrapper)\n[![Coverage Status](https://img.shields.io/coveralls/watson-developer-cloud/nodejs-wrapper.svg)](https://coveralls.io/r/watson-developer-cloud/nodejs-wrapper)\n[![Join the chat at https://gitter.im/watson-developer-cloud/nodejs-wrapper](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/watson-developer-cloud/nodejs-wrapper?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nWrapper to use the [Watson Developer Cloud][wdc] services, a collection of REST\nAPIs and SDKs that use cognitive computing to solve complex problems.\n\n## Table of Contents\n  * [Watson Developer Cloud][wdc]\n    * [Questions](#questions)\n    * [Installation](#installation)\n    * [Usage](#usage)\n    * [Getting the Service Credentials](#getting-the-service-credentials)\n    * [IBM Watson Services](#ibm-watson-services)\n      * [Concept Expansion](#concept-expansion)\n      * [Concept Insights](#concept-insights)\n      * [Language Identification](#language-identification)\n      * [Machine Translation](#machine-translation)\n      * [Message Resonance](#message-resonance)\n      * [Personality Insights](#personality-insights)\n      * [Question and Answer](#question-and-answer)\n      * [Relationship Extraction](#relationship-extraction)\n      * [Speech to Text](#speech-to-text)\n      * [Text to Speech](#text-to-speech)\n      * [Tradeoff Analytics](#tradeoff-analytics)\n      * [Visual Recognition](#visual-recognition)\n    * [Running in Bluemix](#running-in-bluemix)\n    * [Debug](#debug)\n    * [Tests](#tests)\n    * [Open Source @ IBM](#open-source--ibm)\n    * [License](#license)\n    * [Contributing](#contributing)\n\n## Questions\n\nIf you are having difficulties using the APIs or have a question about the IBM\nWatson Services, please ask a question on\n[dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson)\nor [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson).\n\n## Installation\n\n```sh\n$ npm install watson-developer-cloud --save\n```\n\n## Usage\n\nThe examples below assume that you already have service credentials. If not,\nyou will have to create and bind the service in [Bluemix][bluemix]. See the\n[Getting Started][getting_started] page for more details.\n\nIf you are running your application in Bluemix, you don't need to specify the\ncredentials; the wrapper will get them for you by looking at the `VCAP_SERVICES`\nenvironment variable.\n\n### Getting the Service Credentials\nThe credentials for the services are stored in the\n[VCAP_SERVICES][vcap_environment] environment variable. To get them, you need\nto first create and bind the service to your application.\n\nThere are two ways to get the credentials. You can use Bluemix to access your\napp and view the `VCAP_SERVICES` there or you can run:\n\n```sh\n$ cf env <application-name>\n```\n\nExample output:\n```sh\n  System-Provided:\n  {\n  \"VCAP_SERVICES\": {\n    \"visual_recognition\": [{\n        \"credentials\": {\n          \"password\": \"<password>\",\n          \"url\": \"<url>\",\n          \"username\": \"<username>\"\n        },\n      \"label\": \"visual_recognition\",\n      \"name\": \"visual-recognition-service\",\n      \"plan\": \"free\"\n   }]\n  }\n  }\n```\n\nYou need to copy `username` and `password`.\n\n## IBM Watson Services\nThe Watson Developer Cloud offers a variety of services for building cognitive\napps.\n\n### Concept Expansion\nMap euphemisms or colloquial terms to more commonly understood phrases using\nthe [Concept Expansion][concept_expansion] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar concept_expansion = watson.concept_expansion({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  seeds: ['motrin','tylenol','aspirin'],\n  dataset: 'mtsamples',\n  label: 'medications'\n};\n\nconcept_expansion.expand(params, function (err, response) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Concept Insights\nUse the [Concept Insights][concept_insights] service to identify words in the\ntext that correspond to concepts in a Wikipedia graph.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar concept_insights = watson.concept_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\n/*** Annotate Text ***/\n\nvar params = {\n  user: 'wikipedia',\n  graph: 'en-20120601',\n  text: 'IBM Watson won the Jeopardy television show hosted by Alex Trebek'\n};\n\n// Retrieve the concepts for input text\nconcept_insights.annotateText(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else {\n    console.log(\"\\n*** Annotate Text ***\\n\");\n    console.log(JSON.stringify(res, null, 2));\n  }\n});\n\n/*** Semantic Search ***/\n\nvar payload = {\n  func: 'semanticSearch',\n  ids: [\n    '/graph/wikipedia/en-20120601/Software_development_process',\n    '/graph/wikipedia/en-20120601/Programming_tool'\n  ],\n  corpus: 'ibmresearcher',\n  user: 'public',\n  limit: 5\n};\n\nconcept_insights.semanticSearch(payload, function(error, results) {\n  if (error)\n    console.log(error);\n  else {\n    console.log(\"\\n*** Semantic Search ***\\n\");\n    console.log(JSON.stringify(results, null, 2));\n  }\n});\n```\n\n### Language Identification\nIdentify a language using the [Language Identification][language_identification]\nservice.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar language_identification = watson.language_identification({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nlanguage_identification.identify({\n  text: 'The language identification service takes text input and identifies the language used.' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Machine Translation\nTranslate text from one language to another using the\n[Machine Translation][machine_translation] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar machine_translation = watson.machine_translation({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nmachine_translation.translate({\n  text: 'A sentence must have a verb', from : 'enus', to: 'eses' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Message Resonance\nGet resonance information for individual words in a sentence from the\n[Message Resonance][message_resonance] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar message_resonance = watson.message_resonance({\n  username: '<username>',\n  password: '<password>',\n  version:'v1'\n});\n\nmessage_resonance.resonance({\n  text: 'IBM Watson Developer Cloud', dataset: 1 },\n  function(err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Personality Insights\nAnalyze text and get a personality profile by using the\n[Personality Insights][personality_insights] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar personality_insights = watson.personality_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v2'\n});\n\npersonality_insights.profile({\n  text: 'Enter more than 100 unique words here...' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n**Note:** Don't forget to update the `text` variable! Also, if you experience\nauthentication errors, remember that the Personality Insights service is not\na free service.\n\n### Question and Answer\nAsk a healthcare-related question of the\n[Question and Answer][question_and_answer] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar question_and_answer_healthcare = watson.question_and_answer({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1',\n  dataset: 'healthcare' /* The dataset can be specified when creating\n                         * the service or when calling it */\n});\n\nquestion_and_answer_healthcare.ask({\n  text: 'What is HIV?'}, function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Relationship Extraction\nAnalyze an English news article and get the relationships between sentence\ncomponents (nouns, verbs, subjects, objects, etc.) by using the\n[Relationship Extraction][relationship_extraction] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar relationship_extraction = watson.relationship_extraction({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nrelationship_extraction.extract({\n  text: 'IBM Watson developer cloud',\n  dataset: 'ie-en-news' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Speech to Text\nUse the [Speech to Text][speech_to_text] service to recognize the text from a\n.wav file.\n\n```javascript\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar speech_to_text = watson.speech_to_text({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  // From file\n  audio: fs.createReadStream('./resources/speech.wav'),\n  content_type: 'audio/l16; rate=44100'\n};\n\nspeech_to_text.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n### Text to Speech\nUse the [Text to Speech][text_to_speech] service to synthesize text into a\n.wav file.\n\n```js\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar text_to_speech = watson.text_to_speech({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  text: 'Hello from IBM Watson',\n  voice: 'VoiceEnUsMichael', // Optional voice\n  accept: 'audio/wav'\n};\n\n// Pipe the synthesized text to a file\ntext_to_speech.synthesize(params).pipe(fs.createWriteStream('output.wav'));\n```\n\n### Tradeoff Analytics\nUse the [Tradeoff Analytics][tradeoff_analytics] service to find the best\nphone that minimizes price and weight and maximizes screen size.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar tradeoff_analytics = watson.tradeoff_analytics({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\n// From file\nvar params = require('./resources/problem.json');\n\ntradeoff_analytics.dilemmas(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n### Visual Recognition\nUse the [Visual Recognition][visual_recognition] service to recognize the\nfollowing picture.\n\n<img src=\"http://visual-recognition-demo.mybluemix.net/images/73388.jpg\" width=\"150\" />\n\n```js\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar visual_recognition = watson.visual_recognition({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  // From file\n  image_file: fs.createReadStream('./resources/car.png')\n};\n\nvisual_recognition.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, 'labels', 2));\n});\n```\n\n## Running in Bluemix\nBy default, the wrapper tries to use the Bluemix `VCAP_SERVICES` environment\nvariable to get the credentials for a given service. You can avoid this by\nusing:\n`use_vcap_services`.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar concept_expansion = watson.concept_expansion({\n  version: 'v1',\n  use_vcap_services: false\n});\n```\nThis example fails because you did not provide a username and password and\nthe wrapper will not look into Bluemix for these values.\n\n## Debug\nThis wrapper relies on the `request` npm module writted by\n[mikeal][mikeal_github] to call the Watson Services. To debug the apps, add\n'request' to the `NODE_DEBUG` environment variable:\n\n```sh\n$ NODE_DEBUG='request' node app.js\n```\nwhere `app.js` is your Node.js file.\n\n## Tests\nRunning all the tests:\n```sh\n$ npm test\n```\n\nRunning a specific test:\n```sh\n$ mocha -g '<test name>'\n```\n\n## Open Source @ IBM\n[Find more open source projects on the IBM Github Page.](http://ibm.github.io/)\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is available in\n[COPYING](https://github.com/watson-developer-cloud/nodejs-wrapper/blob/master/LICENSE).\n\n## Contributing\nSee [CONTRIBUTING](https://github.com/watson-developer-cloud/nodejs-wrapper/blob/master/CONTRIBUTING.md).\n\n\n[question_and_answer]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/qaapi/\n[message_resonance]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mrapi/\n[personality_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/personality-insights/\n[language_identification]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/lidapi/\n[machine_translation]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mtapi/\n[concept_expansion]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/glimpseapi/\n[relationship_extraction]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/sireapi/\n[visual_recognition]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-recognition/\n[text_to_speech]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/text-to-speech/\n[speech_to_text]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/speech-to-text/\n[concept_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/concept-insights/\n[tradeoff_analytics]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tradeoff-analytics/\n\n\n[getting_started]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/getstarted.html\n[wdc]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\n[vcap_environment]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/getting_started/index.html#EnvVars\n[bluemix]: https://console.ng.bluemix.net\n[npm_link]: https://www.npmjs.com/package/watson-developer-cloud\n[mikeal_github]: https://github.com/request/request\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/watson-developer-cloud/nodejs-wrapper",
  "_id": "watson-developer-cloud@0.9.9",
  "_shasum": "02be77fa62f24f64623f17be9ef6e4b95bc9f447",
  "_from": "watson-developer-cloud@~0.9.3",
  "_resolved": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-0.9.9.tgz"
}
